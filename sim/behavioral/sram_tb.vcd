$date
	Fri Oct 23 01:56:23 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module sram_tb $end
$var wire 32 ! d_out [31:0] $end
$var reg 15 " addr [14:0] $end
$var reg 1 # clock $end
$var reg 3 $ conf [2:0] $end
$var reg 32 % d_in [31:0] $end
$var reg 1 & reg_out $end
$var reg 1 ' ren $end
$var reg 1 ( wen $end
$scope module sram $end
$var wire 10 ) addr [9:0] $end
$var wire 3 * c [2:0] $end
$var wire 32 + d_in [31:0] $end
$var wire 1 & reg_out $end
$var wire 1 ' ren $end
$var wire 1 # sram_clk $end
$var wire 1 ( wen $end
$var wire 32 , d_out [31:0] $end
$scope module sram $end
$var wire 15 - addr [14:0] $end
$var wire 3 . c [2:0] $end
$var wire 32 / d_in [31:0] $end
$var wire 1 & reg_out $end
$var wire 1 ' ren $end
$var wire 1 # sram_clk $end
$var wire 1 ( wen $end
$var wire 32 0 d_out [31:0] $end
$var reg 15 1 addr_reg [14:0] $end
$var reg 3 2 c_reg [2:0] $end
$var reg 32 3 d_in_reg [31:0] $end
$var reg 32 4 d_out_reg [31:0] $end
$var reg 32 5 d_out_registered [31:0] $end
$var reg 32768 6 mem [32767:0] $end
$var reg 1 7 ren_reg $end
$var reg 1 8 wen_reg $end
$scope begin MEM_READ $end
$upscope $end
$scope begin MEM_WRITE $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x8
x7
bx 6
bx 5
bx 4
bx 3
bx 2
bx 1
bx 0
bx /
b0 .
bx -
bx ,
bx +
b0 *
bx )
x(
x'
0&
bx %
b0 $
0#
bx "
bx !
$end
#3
b0 )
b0 -
1(
0'
b0 "
b1011111111110101011 %
b1011111111110101011 +
b1011111111110101011 /
#4
b0 2
b1011111111110101011 3
b0 1
07
18
1#
#8
bx00000000000001011111111110101011 6
0#
#11
0(
1'
#12
17
08
1#
#16
b1011111111110101011 !
b1011111111110101011 ,
b1011111111110101011 0
b1011111111110101011 4
0#
#19
0'
b1 $
b1 *
b1 .
#20
bx !
bx ,
bx 0
bx 4
b1011111111110101011 5
b1 2
07
1#
#24
0#
#27
1(
b0 %
b0 +
b0 /
#28
bx 5
b0 3
18
1#
#32
bx00000000000001010000000000000000 6
0#
#35
0(
1'
b0 $
b0 *
b0 .
#36
b0 2
17
08
1#
#40
b1010000000000000000 !
b1010000000000000000 ,
b1010000000000000000 0
b1010000000000000000 4
0#
#43
0'
b10 $
b10 *
b10 .
#44
bx !
bx ,
bx 0
bx 4
b1010000000000000000 5
b10 2
07
1#
#48
0#
#51
b10 -
b10 )
1(
b10 "
b10110010 %
b10110010 +
b10110010 /
#52
bx 5
b10110010 3
b10 1
18
1#
#56
bx00000000101100100000000000000000 6
0#
#59
b0 -
b0 )
0(
1'
b0 "
b0 %
b0 +
b0 /
1&
b0 $
b0 *
b0 .
#60
b0 2
b0 3
b0 1
17
08
1#
#64
b101100100000000000000000 4
0#
#67
0'
b11 $
b11 *
b11 .
#68
b101100100000000000000000 !
b101100100000000000000000 ,
b101100100000000000000000 0
bx 4
b101100100000000000000000 5
b11 2
07
1#
#72
0#
#75
b1100 -
b1100 )
1(
b1100 "
b1111 %
b1111 +
b1111 /
#76
bx !
bx ,
bx 0
bx 5
b1111 3
b1100 1
18
1#
#80
bx1111xxxxxxxxxxxxxxxx00000000101100100000000000000000 6
0#
#83
b1 -
b1 )
0(
1'
b1 "
b0 %
b0 +
b0 /
b0 $
b0 *
b0 .
#84
b0 2
b0 3
b1 1
17
08
1#
#88
bx1111xxxxxxxxxxxxxxxx 4
0#
#91
0'
#92
bx1111xxxxxxxxxxxxxxxx !
bx1111xxxxxxxxxxxxxxxx ,
bx1111xxxxxxxxxxxxxxxx 0
bx 4
bx1111xxxxxxxxxxxxxxxx 5
07
1#
#96
0#
#100
bx !
bx ,
bx 0
bx 5
1#
#104
0#
#108
1#
#111
